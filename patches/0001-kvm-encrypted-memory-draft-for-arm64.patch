From a947491d1b886923d04e9adce00cae1b5602c849 Mon Sep 17 00:00:00 2001
From: Janne Karhunen <Janne.Karhunen@gmail.com>
Date: Mon, 10 May 2021 14:02:47 +0300
Subject: [PATCH] kvm: 'encrypted memory' draft for arm64

Signed-off-by: Janne Karhunen <Janne.Karhunen@gmail.com>
---
 arch/arm/include/asm/set_memory.h    |  4 ++
 arch/arm64/Kconfig                   |  2 +
 arch/arm64/configs/defconfig         |  8 +++-
 arch/arm64/include/asm/mem_encrypt.h | 13 ++++++
 arch/arm64/kvm/hvccall-defines.h     | 70 ++++++++++++++++++++++++++++
 arch/arm64/mm/Makefile               |  3 +-
 arch/arm64/mm/set_memory.c           | 68 +++++++++++++++++++++++++++
 drivers/virtio/virtio_ring.c         | 10 ++--
 8 files changed, 172 insertions(+), 6 deletions(-)
 create mode 100644 arch/arm64/include/asm/mem_encrypt.h
 create mode 100644 arch/arm64/kvm/hvccall-defines.h
 create mode 100644 arch/arm64/mm/set_memory.c

diff --git a/arch/arm/include/asm/set_memory.h b/arch/arm/include/asm/set_memory.h
index a1ceff4295d3..0cf284cbbc8a 100644
--- a/arch/arm/include/asm/set_memory.h
+++ b/arch/arm/include/asm/set_memory.h
@@ -26,4 +26,8 @@ static inline void set_kernel_text_rw(void) { }
 static inline void set_kernel_text_ro(void) { }
 #endif
 
+#ifdef CONFIG_ARCH_HAS_MEM_ENCRYPT
+bool force_dma_unencrypted(struct device *dev);
+int set_memory_encrypted(unsigned long addr, int numpages);
+int set_memory_decrypted(unsigned long addr, int numpages);
 #endif
diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 5e5cf3af6351..c8ce611fd58b 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -37,6 +37,8 @@ config ARM64
 	select ARCH_HAS_SYSCALL_WRAPPER
 	select ARCH_HAS_TEARDOWN_DMA_OPS if IOMMU_SUPPORT
 	select ARCH_HAS_TICK_BROADCAST if GENERIC_CLOCKEVENTS_BROADCAST
+	select ARCH_HAS_FORCE_DMA_UNENCRYPTED
+	select ARCH_HAS_MEM_ENCRYPT
 	select ARCH_HAVE_ELF_PROT
 	select ARCH_HAVE_NMI_SAFE_CMPXCHG
 	select ARCH_INLINE_READ_LOCK if !PREEMPTION
diff --git a/arch/arm64/configs/defconfig b/arch/arm64/configs/defconfig
index 5cfe3cf6f2ac..65781a3a78c5 100644
--- a/arch/arm64/configs/defconfig
+++ b/arch/arm64/configs/defconfig
@@ -71,7 +71,7 @@ CONFIG_KEXEC_FILE=y
 CONFIG_CRASH_DUMP=y
 CONFIG_XEN=y
 CONFIG_COMPAT=y
-CONFIG_RANDOMIZE_BASE=y
+CONFIG_RANDOMIZE_BASE=n
 CONFIG_HIBERNATION=y
 CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
 CONFIG_ENERGY_MODEL=y
@@ -1085,6 +1085,7 @@ CONFIG_CRYPTO_DEV_HISI_HPRE=m
 CONFIG_CMA_SIZE_MBYTES=32
 CONFIG_PRINTK_TIME=y
 CONFIG_DEBUG_INFO=y
+CONFIG_DEBUG_INFO_REDUCED=n
 CONFIG_MAGIC_SYSRQ=y
 CONFIG_DEBUG_FS=y
 CONFIG_DEBUG_KERNEL=y
@@ -1092,3 +1093,8 @@ CONFIG_DEBUG_KERNEL=y
 # CONFIG_DEBUG_PREEMPT is not set
 # CONFIG_FTRACE is not set
 CONFIG_MEMTEST=y
+CONFIG_DMA_DIRECT_REMAP=y
+CONFIG_DMA_REMAP=y
+CONFIG_ARCH_HAS_DMA_MARK_CLEAN=y
+CONFIG_ARCH_HAS_FORCE_DMA_UNENCRYPTED=y
+CONFIG_ARCH_HAS_MEM_ENCRYPT=y
diff --git a/arch/arm64/include/asm/mem_encrypt.h b/arch/arm64/include/asm/mem_encrypt.h
new file mode 100644
index 000000000000..d75c682abd53
--- /dev/null
+++ b/arch/arm64/include/asm/mem_encrypt.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+
+#ifndef _ASMARM_MEMENC_H
+#define _ASMARM_MEMENC_H
+
+int set_memory_encrypted(unsigned long addr, int numpages);
+int set_memory_decrypted(unsigned long addr, int numpages);
+
+static inline bool mem_encrypt_active(void)
+{
+	return true;
+};
+#endif
diff --git a/arch/arm64/kvm/hvccall-defines.h b/arch/arm64/kvm/hvccall-defines.h
new file mode 100644
index 000000000000..b46901af5755
--- /dev/null
+++ b/arch/arm64/kvm/hvccall-defines.h
@@ -0,0 +1,70 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+#ifndef __HYP_API__
+#define __HYP_API__
+/*
+ * Base addressing for data sharing
+ */
+#define KERNEL_MAP	0xFFFFFFF000000000
+#define KERN_VA_MASK	0x0000000FFFFFFFFF
+#define CALL_MASK	KERN_VA_MASK
+#define KERNEL_BASE	0x4000000000
+
+/*
+ * Kernel lock flags
+ */
+#define HOST_STAGE1_LOCK		0x1
+#define HOST_STAGE2_LOCK		0x2
+#define HOST_KVM_CALL_LOCK		0x4
+#define HOST_PT_LOCK			0x8
+#define HOST_KVM_TRAMPOLINE_LOCK	0x10
+
+/*
+ * Host protection support
+ */
+#define HYP_FIRST_HOSTCALL		0x8000
+#define HYP_HOST_MAP_STAGE1		0x8000
+#define HYP_HOST_MAP_STAGE2		0x8001
+#define HYP_HOST_UNMAP_STAGE1		0x8002
+#define HYP_HOST_UNMAP_STAGE2		0x8003
+#define HYP_HOST_BOOTSTEP		0x8004
+#define HYP_HOST_GET_VMID		0x8005
+#define HYP_HOST_SET_LOCKFLAGS		0x8006
+#define HYP_HOST_PREPARE_STAGE1		0x8007
+#define HYP_HOST_PREPARE_STAGE2		0x8008
+#define HYP_LAST_HOSTCALL		HYP_HOST_SET_LOCKFLAGS
+
+/*
+ * KVM guest support
+ */
+#define HYP_FIRST_GUESTCALL		0x9000
+#define HYP_READ_MDCR_EL2		0x9000
+#define HYP_SET_HYP_TXT			0x9001
+#define HYP_SET_TPIDR			0x9002
+#define HYP_INIT_GUEST			0x9003
+#define HYP_FREE_GUEST			0x9004
+#define HYP_UPDATE_GUEST_MEMSLOT	0x9005
+#define HYP_GUEST_MAP_STAGE2		0x9006
+#define HYP_GUEST_UNMAP_STAGE2		0x9007
+#define HYP_SET_WORKMEM			0x9008
+#define HYP_USER_COPY			0x9009
+#define HYP_MKYOUNG			0x900A
+#define HYP_SET_GUEST_MEMORY_OPEN	0x900B
+#define HYP_SET_GUEST_MEMORY_BLINDED	0x900C
+#define HYP_MKOLD			0x900D
+#define HYP_ISYOUNG			0x900E
+#define HYP_LAST_GUESTCALL		HYP_ISYOUNG
+
+/*
+ * Misc
+ */
+#define HYP_READ_LOG			0xA000
+
+#define STR(x) #x
+#define XSTR(s) STR(s)
+
+#ifndef __ASSEMBLY__
+extern int __kvms_hvc_cmd(unsigned long cmd, ...);
+extern uint64_t __kvms_hvc_get(unsigned long cmd, ...);
+#endif // __ASSEMBLY__
+
+#endif // __HYP_API__
diff --git a/arch/arm64/mm/Makefile b/arch/arm64/mm/Makefile
index 5ead3c3de3b6..ab8419f715c2 100644
--- a/arch/arm64/mm/Makefile
+++ b/arch/arm64/mm/Makefile
@@ -2,7 +2,8 @@
 obj-y				:= dma-mapping.o extable.o fault.o init.o \
 				   cache.o copypage.o flush.o \
 				   ioremap.o mmap.o pgd.o mmu.o \
-				   context.o proc.o pageattr.o
+				   context.o proc.o pageattr.o \
+				   set_memory.o
 obj-$(CONFIG_HUGETLB_PAGE)	+= hugetlbpage.o
 obj-$(CONFIG_PTDUMP_CORE)	+= ptdump.o
 obj-$(CONFIG_PTDUMP_DEBUGFS)	+= ptdump_debugfs.o
diff --git a/arch/arm64/mm/set_memory.c b/arch/arm64/mm/set_memory.c
new file mode 100644
index 000000000000..0e9f55f5904b
--- /dev/null
+++ b/arch/arm64/mm/set_memory.c
@@ -0,0 +1,68 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+
+#include <linux/kernel.h>
+#include <asm/memory.h>
+#include <asm/set_memory.h>
+
+#include "../kvm/hvccall-defines.h"
+
+static int __set_memory_encrypted(unsigned long addr, int numpages)
+{
+	register int ret asm ("x0");
+
+	__asm__ __volatile__ (
+		"mov	x0, " XSTR(HYP_SET_GUEST_MEMORY_BLINDED) "\n"
+		"mov	x1, %[addr]\n"
+		"mov	x2, %[numpages]\n"
+		"hvc	#0\n"
+		:
+		: [addr]"r"(addr), [numpages]"r"(numpages)
+		: "memory", "x0", "x1", "x2");
+
+	return ret;
+}
+
+int set_memory_encrypted(unsigned long addr, int numpages)
+{
+	unsigned long gpa;
+
+	gpa = virt_to_phys((void *)addr);
+	numpages *= PAGE_SIZE;
+
+	pr_err("set_memory_encrypted() %lx/%lx len %d\n", addr, gpa, numpages);
+
+	return __set_memory_encrypted(gpa, numpages);
+}
+
+static int __set_memory_decrypted(unsigned long addr, int numpages)
+{
+	register int ret asm ("x0");
+
+	__asm__ __volatile__ (
+		"mov	x0, " XSTR(HYP_SET_GUEST_MEMORY_OPEN) "\n"
+		"mov	x1, %[addr]\n"
+		"mov	x2, %[numpages]\n"
+		"hvc	#0\n"
+		:
+		: [addr]"r"(addr), [numpages]"r"(numpages)
+		: "memory", "x0", "x1", "x2");
+
+	return ret;
+}
+
+int set_memory_decrypted(unsigned long addr, int numpages)
+{
+	unsigned long gpa;
+
+	gpa = virt_to_phys((void *)addr);
+	numpages *= PAGE_SIZE;
+
+	pr_err("set_memory_decrypted() %lx/%lx len %d\n", addr, gpa, numpages);
+
+	return __set_memory_decrypted(gpa, numpages);
+}
+
+bool force_dma_unencrypted(struct device *dev)
+{
+	return true;
+}
diff --git a/drivers/virtio/virtio_ring.c b/drivers/virtio/virtio_ring.c
index 71e16b53e9c1..0959b91472c5 100644
--- a/drivers/virtio/virtio_ring.c
+++ b/drivers/virtio/virtio_ring.c
@@ -251,11 +251,10 @@ static bool vring_use_dma_api(struct virtio_device *vdev)
 	 * not work without an even larger kludge.  Instead, enable
 	 * the DMA API if we're a Xen guest, which at least allows
 	 * all of the sensible Xen configurations to work correctly.
-	 */
+	 *
 	if (xen_domain())
-		return true;
-
-	return false;
+	 */
+	return true;
 }
 
 size_t virtio_max_dma_size(struct virtio_device *vdev)
@@ -859,6 +858,7 @@ static struct virtqueue *vring_create_virtqueue_split(
 	dma_addr_t dma_addr;
 	size_t queue_size_in_bytes;
 	struct vring vring;
+	u64 addr;
 
 	/* We assume num is a power of 2. */
 	if (num & (num - 1)) {
@@ -899,6 +899,8 @@ static struct virtqueue *vring_create_virtqueue_split(
 		return NULL;
 	}
 
+	addr = (u64)dma_addr;
+	pr_warn("vring at 0x%llx, length %d\n", addr, num);
 	to_vvq(vq)->split.queue_dma_addr = dma_addr;
 	to_vvq(vq)->split.queue_size_in_bytes = queue_size_in_bytes;
 	to_vvq(vq)->we_own_ring = true;
-- 
2.25.1

