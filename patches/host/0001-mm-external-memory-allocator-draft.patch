From 8c837c82f2adcdf0812c905426de164730bcbd83 Mon Sep 17 00:00:00 2001
From: Janne Karhunen <Janne.Karhunen@gmail.com>
Date: Thu, 4 May 2023 14:11:17 +0300
Subject: [PATCH] mm: external memory allocator draft

When the guest VMs communicate with the host system via virtio, the
memory for the communication channel is allocated from the guest
memory space. The allocations are scattered all around the memory
and they relatively difficult to track accurately. This patch moves
all those allocations into configurable memory region that may reside
outside of the guest kernel.

In the modern virtualization systems the guest memory is either
separated from the host via the MMU shadow pages tables or encrypted
against the malicious host access. This leads to the guests having to
specifically request every page that the host needs to access either
to be decrypted or opened via set_memory_decrypted() architecture
extension.

Scattering the virtio memory all over the guest memory space and
opening them one by one leads to multiple problems for the hypervisor:
1) Simple hypervisor memory access control policies become impossible
   as each shared region has to be tracked separately,
2) Simple usage of the DMA api may lead to unneeded pages being shared
   with the host exposing the guest to attacks / data leakage,
3) The shadow page tables explode in size as the shared regions usually
   cannot be described via large block descriptors,
4) Allocated shared object alignment may be difficult to verify such
   that nothing extra is shared with the host.

This patch attempts to resolve all of the above by introducing a new
kmalloc flag that can be used to allocate memory from a 'open' memory
pool that may reside anywhere in the device memory that the guest and
the host have permission to access.

Signed-off-by: Janne Karhunen <Janne.Karhunen@gmail.com>
---
 arch/arm64/configs/defconfig   | 139 +++++------
 arch/arm64/mm/init.c           |   4 +-
 include/linux/emem.h           |  65 +++++
 include/linux/gfp.h            |  20 +-
 include/linux/slab.h           |  26 +-
 include/trace/events/mmflags.h |   3 +-
 init/main.c                    |   8 +
 mm/Kconfig                     |  15 ++
 mm/Makefile                    |   1 +
 mm/emem.c                      | 426 +++++++++++++++++++++++++++++++++
 mm/page_alloc.c                |  13 +
 mm/slab_common.c               |   3 +
 mm/slub.c                      |   5 +
 tools/perf/builtin-kmem.c      |   1 +
 virt/kvm/kvm_main.c            |   3 +
 15 files changed, 641 insertions(+), 91 deletions(-)
 create mode 100644 include/linux/emem.h
 create mode 100644 mm/emem.c

diff --git a/arch/arm64/configs/defconfig b/arch/arm64/configs/defconfig
index ac7d5d172428..95a93ad1ef01 100644
--- a/arch/arm64/configs/defconfig
+++ b/arch/arm64/configs/defconfig
@@ -3,17 +3,15 @@ CONFIG_POSIX_MQUEUE=y
 CONFIG_AUDIT=y
 CONFIG_NO_HZ_IDLE=y
 CONFIG_HIGH_RES_TIMERS=y
+CONFIG_BPF_JIT=y
 CONFIG_PREEMPT=y
 CONFIG_IRQ_TIME_ACCOUNTING=y
 CONFIG_BSD_PROCESS_ACCT=y
 CONFIG_BSD_PROCESS_ACCT_V3=y
-CONFIG_TASK_XACCT=y
-CONFIG_TASK_IO_ACCOUNTING=y
 CONFIG_IKCONFIG=y
 CONFIG_IKCONFIG_PROC=y
 CONFIG_NUMA_BALANCING=y
 CONFIG_MEMCG=y
-CONFIG_MEMCG_SWAP=y
 CONFIG_BLK_CGROUP=y
 CONFIG_CGROUP_PIDS=y
 CONFIG_CGROUP_HUGETLB=y
@@ -28,8 +26,6 @@ CONFIG_KALLSYMS_ALL=y
 # CONFIG_COMPAT_BRK is not set
 CONFIG_PROFILING=y
 CONFIG_ARCH_ACTIONS=y
-CONFIG_ARCH_AGILEX=y
-CONFIG_ARCH_N5X=y
 CONFIG_ARCH_SUNXI=y
 CONFIG_ARCH_ALPINE=y
 CONFIG_ARCH_APPLE=y
@@ -63,18 +59,17 @@ CONFIG_ARCH_UNIPHIER=y
 CONFIG_ARCH_VEXPRESS=y
 CONFIG_ARCH_VISCONTI=y
 CONFIG_ARCH_XGENE=y
-CONFIG_ARCH_ZX=y
 CONFIG_ARCH_ZYNQMP=y
 CONFIG_ARM64_VA_BITS_48=y
 CONFIG_SCHED_MC=y
 CONFIG_SCHED_SMT=y
 CONFIG_NUMA=y
-CONFIG_SECCOMP=y
 CONFIG_KEXEC=y
 CONFIG_KEXEC_FILE=y
 CONFIG_CRASH_DUMP=y
 CONFIG_XEN=y
 CONFIG_COMPAT=y
+# CONFIG_ARM64_PTR_AUTH is not set
 CONFIG_RANDOMIZE_BASE=y
 CONFIG_HIBERNATION=y
 CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y
@@ -87,7 +82,6 @@ CONFIG_CPU_FREQ_GOV_POWERSAVE=m
 CONFIG_CPU_FREQ_GOV_USERSPACE=y
 CONFIG_CPU_FREQ_GOV_ONDEMAND=y
 CONFIG_CPU_FREQ_GOV_CONSERVATIVE=m
-CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y
 CONFIG_CPUFREQ_DT=y
 CONFIG_ACPI_CPPC_CPUFREQ=m
 CONFIG_ARM_ALLWINNER_SUN50I_CPUFREQ_NVMEM=m
@@ -100,19 +94,9 @@ CONFIG_ARM_RASPBERRYPI_CPUFREQ=m
 CONFIG_ARM_SCMI_CPUFREQ=y
 CONFIG_ARM_TEGRA186_CPUFREQ=y
 CONFIG_QORIQ_CPUFREQ=y
-CONFIG_ARM_SCMI_PROTOCOL=y
-CONFIG_ARM_SCPI_PROTOCOL=y
-CONFIG_RASPBERRYPI_FIRMWARE=y
-CONFIG_INTEL_STRATIX10_SERVICE=y
-CONFIG_INTEL_STRATIX10_RSU=m
-CONFIG_QCOM_SCM=y
-CONFIG_EFI_CAPSULE_LOADER=y
-CONFIG_IMX_SCU=y
-CONFIG_IMX_SCU_PD=y
 CONFIG_ACPI=y
 CONFIG_ACPI_APEI=y
 CONFIG_ACPI_APEI_GHES=y
-CONFIG_ACPI_APEI_PCIEAER=y
 CONFIG_ACPI_APEI_MEMORY_FAILURE=y
 CONFIG_ACPI_APEI_EINJ=y
 CONFIG_VIRTUALIZATION=y
@@ -133,10 +117,11 @@ CONFIG_JUMP_LABEL=y
 CONFIG_MODULES=y
 CONFIG_MODULE_UNLOAD=y
 # CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set
-CONFIG_KSM=n
+CONFIG_MEMORY_HOTPLUG=y
+CONFIG_MEMORY_HOTREMOVE=y
+# CONFIG_COMPACTION is not set
 CONFIG_MEMORY_FAILURE=y
-CONFIG_TRANSPARENT_HUGEPAGE=n
-CONFIG_COMPACTION=n
+CONFIG_EXT_MEMORY=y
 CONFIG_NET=y
 CONFIG_PACKET=y
 CONFIG_UNIX=y
@@ -186,14 +171,12 @@ CONFIG_NET_ACT_GATE=m
 CONFIG_QRTR=m
 CONFIG_QRTR_SMD=m
 CONFIG_QRTR_TUN=m
-CONFIG_BPF_JIT=y
 CONFIG_CAN=m
+CONFIG_CAN_FLEXCAN=m
 CONFIG_CAN_RCAR=m
 CONFIG_CAN_RCAR_CANFD=m
-CONFIG_CAN_FLEXCAN=m
 CONFIG_BT=m
 CONFIG_BT_HIDP=m
-# CONFIG_BT_HS is not set
 # CONFIG_BT_LE is not set
 CONFIG_BT_LEDS=y
 # CONFIG_BT_DEBUGFS is not set
@@ -231,13 +214,13 @@ CONFIG_PCIE_ROCKCHIP_HOST=m
 CONFIG_PCIE_BRCMSTB=m
 CONFIG_PCI_IMX6=y
 CONFIG_PCI_LAYERSCAPE=y
-CONFIG_PCIE_LAYERSCAPE_GEN4=y
 CONFIG_PCI_HISI=y
 CONFIG_PCIE_QCOM=y
 CONFIG_PCIE_ARMADA_8K=y
 CONFIG_PCIE_KIRIN=y
 CONFIG_PCIE_HISI_STB=y
 CONFIG_PCIE_TEGRA194_HOST=m
+CONFIG_PCIE_LAYERSCAPE_GEN4=y
 CONFIG_PCI_ENDPOINT=y
 CONFIG_PCI_ENDPOINT_CONFIGFS=y
 CONFIG_PCI_EPF_TEST=m
@@ -246,8 +229,15 @@ CONFIG_DEVTMPFS_MOUNT=y
 CONFIG_FW_LOADER_USER_HELPER=y
 CONFIG_FW_LOADER_USER_HELPER_FALLBACK=y
 CONFIG_HISILICON_LPC=y
-CONFIG_FSL_MC_BUS=y
 CONFIG_TEGRA_ACONNECT=m
+CONFIG_ARM_SCMI_PROTOCOL=y
+CONFIG_ARM_SCPI_PROTOCOL=y
+CONFIG_RASPBERRYPI_FIRMWARE=y
+CONFIG_INTEL_STRATIX10_SERVICE=y
+CONFIG_INTEL_STRATIX10_RSU=m
+CONFIG_EFI_CAPSULE_LOADER=y
+CONFIG_IMX_SCU=y
+CONFIG_IMX_SCU_PD=y
 CONFIG_GNSS=m
 CONFIG_GNSS_MTK_SERIAL=m
 CONFIG_MTD=y
@@ -267,8 +257,6 @@ CONFIG_MTD_NAND_MARVELL=y
 CONFIG_MTD_NAND_FSL_IFC=y
 CONFIG_MTD_NAND_QCOM=y
 CONFIG_MTD_SPI_NOR=y
-CONFIG_MTK_DEVAPC=m
-CONFIG_SPI_CADENCE_QUADSPI=y
 CONFIG_BLK_DEV_LOOP=y
 CONFIG_BLK_DEV_NBD=m
 CONFIG_VIRTIO_BLK=y
@@ -304,6 +292,7 @@ CONFIG_PATA_OF_PLATFORM=y
 CONFIG_MD=y
 CONFIG_BLK_DEV_MD=m
 CONFIG_BLK_DEV_DM=m
+CONFIG_DM_CRYPT=m
 CONFIG_DM_MIRROR=m
 CONFIG_DM_ZERO=m
 CONFIG_NETDEVICES=y
@@ -354,19 +343,19 @@ CONFIG_SNI_NETSEC=y
 CONFIG_STMMAC_ETH=m
 CONFIG_TI_K3_AM65_CPSW_NUSS=y
 CONFIG_QCOM_IPA=m
-CONFIG_MDIO_BUS_MUX_MMIOREG=y
-CONFIG_MDIO_BUS_MUX_MULTIPLEXER=y
+CONFIG_MESON_GXL_PHY=m
 CONFIG_AQUANTIA_PHY=y
 CONFIG_BCM54140_PHY=m
 CONFIG_MARVELL_PHY=m
 CONFIG_MARVELL_10G_PHY=m
-CONFIG_MESON_GXL_PHY=m
 CONFIG_MICREL_PHY=y
 CONFIG_MICROSEMI_PHY=y
 CONFIG_AT803X_PHY=y
 CONFIG_REALTEK_PHY=y
 CONFIG_ROCKCHIP_PHY=y
 CONFIG_VITESSE_PHY=y
+CONFIG_MDIO_BUS_MUX_MULTIPLEXER=y
+CONFIG_MDIO_BUS_MUX_MMIOREG=y
 CONFIG_USB_PEGASUS=m
 CONFIG_USB_RTL8150=m
 CONFIG_USB_RTL8152=m
@@ -442,6 +431,7 @@ CONFIG_VIRTIO_CONSOLE=y
 CONFIG_IPMI_HANDLER=m
 CONFIG_IPMI_DEVICE_INTERFACE=m
 CONFIG_IPMI_SI=m
+CONFIG_HW_RANDOM_VIRTIO=m
 CONFIG_TCG_TPM=y
 CONFIG_TCG_TIS_I2C_INFINEON=y
 CONFIG_I2C_CHARDEV=y
@@ -471,6 +461,7 @@ CONFIG_SPI=y
 CONFIG_SPI_ARMADA_3700=y
 CONFIG_SPI_BCM2835=m
 CONFIG_SPI_BCM2835AUX=m
+CONFIG_SPI_CADENCE_QUADSPI=y
 CONFIG_SPI_DESIGNWARE=m
 CONFIG_SPI_DW_DMA=y
 CONFIG_SPI_DW_MMIO=m
@@ -540,9 +531,6 @@ CONFIG_GPIO_PCA953X_IRQ=y
 CONFIG_GPIO_BD9571MWV=m
 CONFIG_GPIO_MAX77620=y
 CONFIG_GPIO_SL28CPLD=m
-CONFIG_POWER_AVS=y
-CONFIG_QCOM_CPR=y
-CONFIG_ROCKCHIP_IODOMAIN=y
 CONFIG_POWER_RESET_MSM=y
 CONFIG_POWER_RESET_QCOM_PON=m
 CONFIG_POWER_RESET_XGENE=y
@@ -550,10 +538,10 @@ CONFIG_POWER_RESET_SYSCON=y
 CONFIG_SYSCON_REBOOT_MODE=y
 CONFIG_BATTERY_SBS=m
 CONFIG_BATTERY_BQ27XXX=y
-CONFIG_SENSORS_ARM_SCMI=y
 CONFIG_BATTERY_MAX17042=m
 CONFIG_CHARGER_BQ25890=m
 CONFIG_CHARGER_BQ25980=m
+CONFIG_SENSORS_ARM_SCMI=y
 CONFIG_SENSORS_ARM_SCPI=y
 CONFIG_SENSORS_LM90=m
 CONFIG_SENSORS_PWM_FAN=m
@@ -564,10 +552,10 @@ CONFIG_SENSORS_INA3221=m
 CONFIG_THERMAL_GOV_POWER_ALLOCATOR=y
 CONFIG_CPU_THERMAL=y
 CONFIG_THERMAL_EMULATION=y
-CONFIG_QORIQ_THERMAL=m
-CONFIG_SUN8I_THERMAL=y
 CONFIG_IMX_SC_THERMAL=m
 CONFIG_IMX8MM_THERMAL=m
+CONFIG_QORIQ_THERMAL=m
+CONFIG_SUN8I_THERMAL=y
 CONFIG_ROCKCHIP_THERMAL=m
 CONFIG_RCAR_THERMAL=y
 CONFIG_RCAR_GEN3_THERMAL=y
@@ -576,8 +564,8 @@ CONFIG_BCM2711_THERMAL=m
 CONFIG_BCM2835_THERMAL=m
 CONFIG_BRCMSTB_THERMAL=m
 CONFIG_EXYNOS_THERMAL=y
-CONFIG_TEGRA_BPMP_THERMAL=m
 CONFIG_TEGRA_SOCTHERM=m
+CONFIG_TEGRA_BPMP_THERMAL=m
 CONFIG_QCOM_TSENS=y
 CONFIG_QCOM_SPMI_TEMP_ALARM=m
 CONFIG_UNIPHIER_THERMAL=y
@@ -585,7 +573,6 @@ CONFIG_WATCHDOG=y
 CONFIG_SL28CPLD_WATCHDOG=m
 CONFIG_ARM_SP805_WATCHDOG=y
 CONFIG_ARM_SBSA_WATCHDOG=y
-CONFIG_ARM_SMC_WATCHDOG=y
 CONFIG_S3C2410_WATCHDOG=y
 CONFIG_DW_WATCHDOG=y
 CONFIG_SUNXI_WATCHDOG=m
@@ -594,6 +581,7 @@ CONFIG_IMX_SC_WDT=m
 CONFIG_QCOM_WDT=m
 CONFIG_MESON_GXBB_WATCHDOG=m
 CONFIG_MESON_WATCHDOG=m
+CONFIG_ARM_SMC_WATCHDOG=y
 CONFIG_RENESAS_WDT=y
 CONFIG_UNIPHIER_WATCHDOG=y
 CONFIG_BCM2835_WDT=y
@@ -646,13 +634,12 @@ CONFIG_MEDIA_CAMERA_SUPPORT=y
 CONFIG_MEDIA_ANALOG_TV_SUPPORT=y
 CONFIG_MEDIA_DIGITAL_TV_SUPPORT=y
 CONFIG_MEDIA_SDR_SUPPORT=y
-CONFIG_MEDIA_CONTROLLER=y
-CONFIG_VIDEO_V4L2_SUBDEV_API=y
 CONFIG_MEDIA_PLATFORM_SUPPORT=y
 # CONFIG_DVB_NET is not set
 CONFIG_MEDIA_USB_SUPPORT=y
 CONFIG_USB_VIDEO_CLASS=m
 CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_VIDEO_QCOM_CAMSS=m
 CONFIG_VIDEO_RCAR_CSI2=m
 CONFIG_VIDEO_RCAR_VIN=m
 CONFIG_VIDEO_SUN6I_CSI=m
@@ -668,7 +655,6 @@ CONFIG_SDR_PLATFORM_DRIVERS=y
 CONFIG_VIDEO_RCAR_DRIF=m
 CONFIG_VIDEO_IMX219=m
 CONFIG_VIDEO_OV5645=m
-CONFIG_VIDEO_QCOM_CAMSS=m
 CONFIG_DRM=y
 CONFIG_DRM_I2C_NXP_TDA998X=m
 CONFIG_DRM_MALI_DISPLAY=m
@@ -693,25 +679,25 @@ CONFIG_DRM_SUN4I=m
 CONFIG_DRM_SUN6I_DSI=m
 CONFIG_DRM_SUN8I_DW_HDMI=m
 CONFIG_DRM_SUN8I_MIXER=m
+CONFIG_DRM_VIRTIO_GPU=y
 CONFIG_DRM_MSM=m
 CONFIG_DRM_TEGRA=m
+CONFIG_DRM_PANEL_BOE_TV101WUM_NL6=m
 CONFIG_DRM_PANEL_LVDS=m
 CONFIG_DRM_PANEL_SIMPLE=m
-CONFIG_DRM_PANEL_BOE_TV101WUM_NL6=m
 CONFIG_DRM_PANEL_MANTIX_MLAF057WE51=m
 CONFIG_DRM_PANEL_RAYDIUM_RM67191=m
 CONFIG_DRM_PANEL_SITRONIX_ST7703=m
 CONFIG_DRM_PANEL_TRULY_NT35597_WQXGA=m
-CONFIG_DRM_DISPLAY_CONNECTOR=m
 CONFIG_DRM_LONTIUM_LT8912B=m
-CONFIG_DRM_NWL_MIPI_DSI=m
 CONFIG_DRM_LONTIUM_LT9611=m
+CONFIG_DRM_LONTIUM_LT9611UXC=m
+CONFIG_DRM_NWL_MIPI_DSI=m
 CONFIG_DRM_PARADE_PS8640=m
 CONFIG_DRM_SII902X=m
 CONFIG_DRM_SIMPLE_BRIDGE=m
 CONFIG_DRM_THINE_THC63LVD1024=m
 CONFIG_DRM_TI_SN65DSI86=m
-CONFIG_DRM_LONTIUM_LT9611UXC=m
 CONFIG_DRM_I2C_ADV7511=m
 CONFIG_DRM_I2C_ADV7511_AUDIO=y
 CONFIG_DRM_DW_HDMI_AHB_AUDIO=m
@@ -742,15 +728,14 @@ CONFIG_SND_HDA_TEGRA=m
 CONFIG_SND_HDA_CODEC_HDMI=m
 CONFIG_SND_SOC=y
 CONFIG_SND_BCM2835_SOC_I2S=m
-CONFIG_SND_SOC_FSL_SAI=m
 CONFIG_SND_SOC_FSL_ASRC=m
 CONFIG_SND_SOC_FSL_MICFIL=m
 CONFIG_SND_SOC_FSL_EASRC=m
 CONFIG_SND_IMX_SOC=m
 CONFIG_SND_SOC_IMX_SGTL5000=m
 CONFIG_SND_SOC_IMX_SPDIF=m
-CONFIG_SND_SOC_IMX_AUDMIX=m
 CONFIG_SND_SOC_FSL_ASOC_CARD=m
+CONFIG_SND_SOC_IMX_AUDMIX=m
 CONFIG_SND_MESON_AXG_SOUND_CARD=m
 CONFIG_SND_MESON_GX_SOUND_CARD=m
 CONFIG_SND_SOC_QCOM=m
@@ -796,11 +781,9 @@ CONFIG_SND_AUDIO_GRAPH_CARD=m
 CONFIG_HID_MULTITOUCH=m
 CONFIG_I2C_HID_ACPI=m
 CONFIG_I2C_HID_OF=m
-CONFIG_USB_CONN_GPIO=m
 CONFIG_USB=y
 CONFIG_USB_OTG=y
 CONFIG_USB_XHCI_HCD=y
-CONFIG_USB_XHCI_PCI=m
 CONFIG_USB_XHCI_PCI_RENESAS=m
 CONFIG_USB_XHCI_TEGRA=y
 CONFIG_USB_EHCI_HCD=y
@@ -847,8 +830,8 @@ CONFIG_TYPEC=m
 CONFIG_TYPEC_TCPM=m
 CONFIG_TYPEC_TCPCI=m
 CONFIG_TYPEC_FUSB302=m
-CONFIG_TYPEC_HD3SS3220=m
 CONFIG_TYPEC_TPS6598X=m
+CONFIG_TYPEC_HD3SS3220=m
 CONFIG_MMC=y
 CONFIG_MMC_BLOCK_MINORS=32
 CONFIG_MMC_ARMMMCI=y
@@ -941,10 +924,11 @@ CONFIG_VFIO=y
 CONFIG_VFIO_PCI=y
 CONFIG_VIRTIO_PCI=y
 CONFIG_VIRTIO_BALLOON=y
+CONFIG_VIRTIO_INPUT=y
 CONFIG_VIRTIO_MMIO=y
+CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES=y
 CONFIG_XEN_GNTDEV=y
 CONFIG_XEN_GRANT_DEV_ALLOC=y
-CONFIG_MFD_CROS_EC_DEV=y
 CONFIG_STAGING=y
 CONFIG_STAGING_MEDIA=y
 CONFIG_VIDEO_HANTRO=m
@@ -953,15 +937,14 @@ CONFIG_CROS_EC=y
 CONFIG_CROS_EC_I2C=y
 CONFIG_CROS_EC_SPI=y
 CONFIG_CROS_EC_CHARDEV=m
-CONFIG_COMMON_CLK_SCMI=y
 CONFIG_COMMON_CLK_RK808=y
+CONFIG_COMMON_CLK_SCMI=y
 CONFIG_COMMON_CLK_SCPI=y
 CONFIG_COMMON_CLK_CS2000_CP=y
 CONFIG_COMMON_CLK_FSL_SAI=y
 CONFIG_COMMON_CLK_S2MPS11=y
 CONFIG_COMMON_CLK_PWM=y
 CONFIG_COMMON_CLK_VC5=y
-CONFIG_COMMON_CLK_ZYNQMP=y
 CONFIG_COMMON_CLK_BD718XX=m
 CONFIG_CLK_RASPBERRYPI=m
 CONFIG_CLK_IMX8MM=y
@@ -976,8 +959,8 @@ CONFIG_QCOM_CLK_APCS_MSM8916=y
 CONFIG_QCOM_CLK_APCC_MSM8996=y
 CONFIG_QCOM_CLK_SMD_RPM=y
 CONFIG_QCOM_CLK_RPMH=y
-CONFIG_IPQ_GCC_8074=y
 CONFIG_IPQ_GCC_6018=y
+CONFIG_IPQ_GCC_8074=y
 CONFIG_MSM_GCC_8916=y
 CONFIG_MSM_GCC_8994=y
 CONFIG_MSM_MMCC_8996=y
@@ -985,16 +968,13 @@ CONFIG_MSM_GCC_8998=y
 CONFIG_QCS_GCC_404=y
 CONFIG_SC_GCC_7180=y
 CONFIG_SDM_CAMCC_845=m
-CONFIG_SDM_GCC_845=y
 CONFIG_SDM_GPUCC_845=y
 CONFIG_SDM_VIDEOCC_845=y
 CONFIG_SDM_DISPCC_845=y
-CONFIG_SM_GCC_8150=y
-CONFIG_SM_GCC_8250=y
+CONFIG_SM_DISPCC_8250=y
 CONFIG_SM_GCC_8350=y
 CONFIG_SM_GPUCC_8150=y
 CONFIG_SM_GPUCC_8250=y
-CONFIG_SM_DISPCC_8250=y
 CONFIG_QCOM_HFPLL=y
 CONFIG_CLK_GFM_LPASS_SM8250=m
 CONFIG_CLK_RCAR_USB2_CLOCK_SEL=y
@@ -1012,6 +992,7 @@ CONFIG_ARM_SMMU=y
 CONFIG_ARM_SMMU_V3=y
 CONFIG_MTK_IOMMU=y
 CONFIG_QCOM_IOMMU=y
+CONFIG_VIRTIO_IOMMU=y
 CONFIG_REMOTEPROC=y
 CONFIG_QCOM_Q6V5_MSS=m
 CONFIG_QCOM_Q6V5_PAS=m
@@ -1026,9 +1007,11 @@ CONFIG_RASPBERRYPI_POWER=y
 CONFIG_FSL_DPAA=y
 CONFIG_FSL_MC_DPIO=y
 CONFIG_FSL_RCPM=y
+CONFIG_MTK_DEVAPC=m
 CONFIG_MTK_PMIC_WRAP=y
 CONFIG_QCOM_AOSS_QMP=y
 CONFIG_QCOM_COMMAND_DB=y
+CONFIG_QCOM_CPR=y
 CONFIG_QCOM_GENI_SE=y
 CONFIG_QCOM_RMTFS_MEM=m
 CONFIG_QCOM_RPMH=y
@@ -1040,21 +1023,22 @@ CONFIG_QCOM_SMP2P=y
 CONFIG_QCOM_SMSM=y
 CONFIG_QCOM_SOCINFO=m
 CONFIG_QCOM_APR=m
-CONFIG_ARCH_R8A774A1=y
-CONFIG_ARCH_R8A774B1=y
-CONFIG_ARCH_R8A774C0=y
-CONFIG_ARCH_R8A774E1=y
+CONFIG_ARCH_R8A77995=y
+CONFIG_ARCH_R8A77990=y
 CONFIG_ARCH_R8A77950=y
 CONFIG_ARCH_R8A77951=y
+CONFIG_ARCH_R8A77965=y
 CONFIG_ARCH_R8A77960=y
 CONFIG_ARCH_R8A77961=y
-CONFIG_ARCH_R8A77965=y
-CONFIG_ARCH_R8A77970=y
 CONFIG_ARCH_R8A77980=y
-CONFIG_ARCH_R8A77990=y
-CONFIG_ARCH_R8A77995=y
+CONFIG_ARCH_R8A77970=y
 CONFIG_ARCH_R8A779A0=y
+CONFIG_ARCH_R8A774C0=y
+CONFIG_ARCH_R8A774E1=y
+CONFIG_ARCH_R8A774A1=y
+CONFIG_ARCH_R8A774B1=y
 CONFIG_ARCH_R9A07G044=y
+CONFIG_ROCKCHIP_IODOMAIN=y
 CONFIG_ROCKCHIP_PM_DOMAINS=y
 CONFIG_ARCH_TEGRA_132_SOC=y
 CONFIG_ARCH_TEGRA_210_SOC=y
@@ -1130,13 +1114,13 @@ CONFIG_PHY_UNIPHIER_USB3=y
 CONFIG_PHY_TEGRA_XUSB=y
 CONFIG_ARM_SMMU_V3_PMU=m
 CONFIG_FSL_IMX8_DDR_PMU=m
-CONFIG_HISI_PMU=y
 CONFIG_QCOM_L2_PMU=y
 CONFIG_QCOM_L3_PMU=y
+CONFIG_HISI_PMU=y
 CONFIG_NVMEM_IMX_OCOTP=y
 CONFIG_NVMEM_IMX_OCOTP_SCU=y
-CONFIG_QCOM_QFPROM=y
 CONFIG_MTK_EFUSE=y
+CONFIG_QCOM_QFPROM=y
 CONFIG_ROCKCHIP_EFUSE=y
 CONFIG_NVMEM_SUNXI_SID=y
 CONFIG_UNIPHIER_EFUSE=y
@@ -1150,11 +1134,9 @@ CONFIG_FPGA_REGION=m
 CONFIG_OF_FPGA_REGION=m
 CONFIG_TEE=y
 CONFIG_OPTEE=y
-CONFIG_SLIMBUS=m
+CONFIG_MUX_MMIO=y
 CONFIG_SLIM_QCOM_CTRL=m
 CONFIG_SLIM_QCOM_NGD_CTRL=m
-CONFIG_MUX_MMIO=y
-CONFIG_INTERCONNECT=y
 CONFIG_INTERCONNECT_IMX=m
 CONFIG_INTERCONNECT_IMX8MQ=m
 CONFIG_INTERCONNECT_QCOM=y
@@ -1179,7 +1161,6 @@ CONFIG_OVERLAY_FS=m
 CONFIG_VFAT_FS=y
 CONFIG_TMPFS_POSIX_ACL=y
 CONFIG_HUGETLBFS=y
-CONFIG_CONFIGFS_FS=y
 CONFIG_EFIVAR_FS=y
 CONFIG_SQUASHFS=y
 CONFIG_NFS_FS=y
@@ -1206,7 +1187,6 @@ CONFIG_CRYPTO_DEV_HISI_TRNG=m
 CONFIG_CMA_SIZE_MBYTES=32
 CONFIG_PRINTK_TIME=y
 CONFIG_DEBUG_INFO=y
-CONFIG_DEBUG_INFO_REDUCED=n
 CONFIG_MAGIC_SYSRQ=y
 CONFIG_DEBUG_FS=y
 CONFIG_DEBUG_KERNEL=y
@@ -1214,14 +1194,3 @@ CONFIG_DEBUG_KERNEL=y
 # CONFIG_DEBUG_PREEMPT is not set
 # CONFIG_FTRACE is not set
 CONFIG_MEMTEST=y
-CONFIG_KVM_GUEST=y
-CONFIG_VIRTIO_INPUT=y
-CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES=y
-CONFIG_DRM_VIRTIO_GPU=y
-CONFIG_HW_RANDOM_VIRTIO=y
-CONFIG_VIRTIO_IOMMU=y
-CONFIG_VIRTIO_PMEM=y
-CONFIG_VIRTIO_VSOCKETS_COMMON=y
-CONFIG_VIRTIO_VSOCKETS=y
-CONFIG_ARM64_PTR_AUTH=n
-CONFIG_DM_CRYPT=m
diff --git a/arch/arm64/mm/init.c b/arch/arm64/mm/init.c
index 3b269c756798..237d282164ae 100644
--- a/arch/arm64/mm/init.c
+++ b/arch/arm64/mm/init.c
@@ -31,6 +31,7 @@
 #include <linux/hugetlb.h>
 #include <linux/acpi_iort.h>
 #include <linux/kmemleak.h>
+#include <linux/emem.h>
 
 #include <asm/boot.h>
 #include <asm/fixmap.h>
@@ -401,8 +402,9 @@ void __init bootmem_init(void)
  */
 void __init mem_init(void)
 {
+//	emem_region_init();
 	if (swiotlb_force == SWIOTLB_FORCE ||
-	    max_pfn > PFN_DOWN(arm64_dma_phys_limit))
+		max_pfn > PFN_DOWN(arm64_dma_phys_limit))
 		swiotlb_init(1);
 	else if (!xen_swiotlb_detect())
 		swiotlb_force = SWIOTLB_NO_FORCE;
diff --git a/include/linux/emem.h b/include/linux/emem.h
new file mode 100644
index 000000000000..ef3e62a7cc18
--- /dev/null
+++ b/include/linux/emem.h
@@ -0,0 +1,65 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __MM_EMEM_H__
+#define __MM_EMEM_H__
+
+#include <linux/init.h>
+#include <linux/mm.h>
+#include <asm/dma.h>
+
+#define EMEM_ALLOC_MAXORDER 15
+#define EMEM_IOSPLIT 2
+
+extern const bool emem_host;
+
+struct emem_region {
+	/* vmemmap region */
+	unsigned long *bitmap;
+	unsigned int npages;
+	unsigned int bits;
+	phys_addr_t dma_base;
+	u64 base;
+	/* iomapped region */
+	unsigned long *iobitmap;
+	unsigned long iopages;
+	unsigned int iobits;
+	phys_addr_t io_dma_base;
+	u64 iobase;
+};
+
+extern struct emem_region emem;
+extern spinlock_t emem_lock;
+
+#ifdef CONFIG_EXT_MEMORY
+int __init emem_region_init(void);
+int is_emem(void *vaddr);
+int is_emem_dma(dma_addr_t addr);
+int is_emem_io(void *vaddr);
+int is_emem_io_phys(phys_addr_t addr);
+
+/* IO allocations */
+void *emem_getpages_io(gfp_t flags, int order);
+void emem_freepages_io(void *, int order);
+
+/* Kernel memory */
+struct page *emem_getpages_unlocked(gfp_t flags, int order);
+struct page *emem_getpages(gfp_t flags, int order);
+void emem_freepages(struct page *page, int order);
+#else
+static inline int __init emem_region_init(void) { return 0 };
+static inline int is_emem(void *vaddr) { return 0; };
+static inline int is_emem_dma(dma_addr_t addr) { return 0; };
+static inline int is_emem_io(void *vaddr) { return 0; };
+static inline int is_emem_io_phys(phys_addr_t addr) { return 0; };
+static inline struct page *emem_getpages_unlocked(gfp_t flags, int order)
+{
+	return NULL;
+};
+static inline struct page *emem_getpages(gfp_t flags, int order)
+{
+	return NULL;
+};
+static inline void emem_freepages(struct page *page, int order) { };
+static inline void *emem_getpages_io(gfp_t flags, int order) { };
+static inline void emem_freepages_io(void *, int order) { };
+#endif
+#endif // __MM_EMEM_H__
diff --git a/include/linux/gfp.h b/include/linux/gfp.h
index 55b2ec1f965a..eb7560ea71b3 100644
--- a/include/linux/gfp.h
+++ b/include/linux/gfp.h
@@ -60,6 +60,12 @@ struct vm_area_struct;
 #else
 #define ___GFP_NOLOCKDEP	0
 #endif
+#ifdef CONFIG_EXT_MEMORY
+#define ___GFP_EXT		0x8000000u
+#else
+#define ___GFP_EXT		0
+#endif
+
 /* If the above are modified, __GFP_BITS_SHIFT may need updating */
 
 /*
@@ -248,8 +254,11 @@ struct vm_area_struct;
 /* Disable lockdep for GFP context tracking */
 #define __GFP_NOLOCKDEP ((__force gfp_t)___GFP_NOLOCKDEP)
 
+/* Shared external allocation */
+#define __GFP_EXT	((__force gfp_t)___GFP_EXT)
+
 /* Room for N __GFP_FOO bits */
-#define __GFP_BITS_SHIFT (25 + IS_ENABLED(CONFIG_LOCKDEP))
+#define __GFP_BITS_SHIFT (26 + IS_ENABLED(CONFIG_EXT_MEMORY))
 #define __GFP_BITS_MASK ((__force gfp_t)((1 << __GFP_BITS_SHIFT) - 1))
 
 /**
@@ -304,6 +313,10 @@ struct vm_area_struct;
  * %GFP_DMA32 is similar to %GFP_DMA except that the caller requires a 32-bit
  * address.
  *
+ * %GFP_EXT indicates that this allocation should be done from an external
+ * memory pool added via the memory hotplug. This allocation type requires
+ * separate configuration and cannot be used without it.
+ *
  * %GFP_HIGHUSER is for userspace allocations that may be mapped to userspace,
  * do not need to be directly accessible by the kernel but that cannot
  * move once in use. An example may be a hardware allocation that maps
@@ -329,6 +342,7 @@ struct vm_area_struct;
 #define GFP_USER	(__GFP_RECLAIM | __GFP_IO | __GFP_FS | __GFP_HARDWALL)
 #define GFP_DMA		__GFP_DMA
 #define GFP_DMA32	__GFP_DMA32
+#define GFP_EXT		__GFP_EXT
 #define GFP_HIGHUSER	(GFP_USER | __GFP_HIGHMEM)
 #define GFP_HIGHUSER_MOVABLE	(GFP_HIGHUSER | __GFP_MOVABLE | \
 			 __GFP_SKIP_KASAN_POISON)
@@ -401,6 +415,10 @@ static inline bool gfpflags_normal_context(const gfp_t gfp_flags)
 #define OPT_ZONE_DMA32 ZONE_NORMAL
 #endif
 
+#ifdef CONFIG_ZONE_EXT
+#define OPT_ZONE_EXT ZONE_EXT
+#endif
+
 /*
  * GFP_ZONE_TABLE is a word size bitstring that is used for looking up the
  * zone to use given the lowest 4 bits of gfp_t. Entries are GFP_ZONES_SHIFT
diff --git a/include/linux/slab.h b/include/linux/slab.h
index 083f3ce550bc..ca03c1243ce4 100644
--- a/include/linux/slab.h
+++ b/include/linux/slab.h
@@ -120,6 +120,12 @@
 /* Slab deactivation flag */
 #define SLAB_DEACTIVATED	((slab_flags_t __force)0x10000000U)
 
+#ifdef CONFIG_EXT_MEMORY
+#define SLAB_CACHE_EXT		((slab_flags_t __force)0x20000000U)
+#else
+#define SLAB_CACHE_EXT		0
+#endif
+
 /*
  * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.
  *
@@ -136,6 +142,7 @@
 #include <linux/kasan.h>
 
 struct mem_cgroup;
+
 /*
  * struct kmem_cache related prototypes
  */
@@ -319,6 +326,11 @@ enum kmalloc_cache_type {
 	KMALLOC_CGROUP = KMALLOC_NORMAL,
 #else
 	KMALLOC_CGROUP,
+#endif
+#ifdef CONFIG_ZONE_EXT
+	KMALLOC_EXT,
+#else
+	KMALLOC_EXT = KMALLOC_NORMAL,
 #endif
 	KMALLOC_RECLAIM,
 #ifdef CONFIG_ZONE_DMA
@@ -337,7 +349,8 @@ kmalloc_caches[NR_KMALLOC_TYPES][KMALLOC_SHIFT_HIGH + 1];
 #define KMALLOC_NOT_NORMAL_BITS					\
 	(__GFP_RECLAIMABLE |					\
 	(IS_ENABLED(CONFIG_ZONE_DMA)   ? __GFP_DMA : 0) |	\
-	(IS_ENABLED(CONFIG_MEMCG_KMEM) ? __GFP_ACCOUNT : 0))
+	(IS_ENABLED(CONFIG_MEMCG_KMEM) ? __GFP_ACCOUNT : 0) |	\
+	(IS_ENABLED(CONFIG_EXT_MEMORY) ? __GFP_EXT : 0))
 
 static __always_inline enum kmalloc_cache_type kmalloc_type(gfp_t flags)
 {
@@ -352,11 +365,14 @@ static __always_inline enum kmalloc_cache_type kmalloc_type(gfp_t flags)
 	 * At least one of the flags has to be set. Their priorities in
 	 * decreasing order are:
 	 *  1) __GFP_DMA
-	 *  2) __GFP_RECLAIMABLE
-	 *  3) __GFP_ACCOUNT
+	 *  2) __GFP_EXT
+	 *  3) __GFP_RECLAIMABLE
+	 *  4) __GFP_ACCOUNT
 	 */
 	if (IS_ENABLED(CONFIG_ZONE_DMA) && (flags & __GFP_DMA))
 		return KMALLOC_DMA;
+	if (IS_ENABLED(CONFIG_ZONE_EXT) && (flags & __GFP_EXT))
+		return KMALLOC_EXT;
 	if (!IS_ENABLED(CONFIG_MEMCG_KMEM) || (flags & __GFP_RECLAIMABLE))
 		return KMALLOC_RECLAIM;
 	else
@@ -573,6 +589,10 @@ static __always_inline void *kmalloc_large(size_t size, gfp_t flags)
  * %__GFP_RETRY_MAYFAIL
  *	Try really hard to succeed the allocation but fail
  *	eventually.
+ *
+ * %__GFP_EXT
+ *	This allocation should be done from an external memory pool.
+ *
  */
 static __always_inline void *kmalloc(size_t size, gfp_t flags)
 {
diff --git a/include/trace/events/mmflags.h b/include/trace/events/mmflags.h
index 116ed4d5d0f8..f9b2c0087231 100644
--- a/include/trace/events/mmflags.h
+++ b/include/trace/events/mmflags.h
@@ -50,7 +50,8 @@
 	{(unsigned long)__GFP_DIRECT_RECLAIM,	"__GFP_DIRECT_RECLAIM"},\
 	{(unsigned long)__GFP_KSWAPD_RECLAIM,	"__GFP_KSWAPD_RECLAIM"},\
 	{(unsigned long)__GFP_ZEROTAGS,		"__GFP_ZEROTAGS"},	\
-	{(unsigned long)__GFP_SKIP_KASAN_POISON,"__GFP_SKIP_KASAN_POISON"}\
+	{(unsigned long)__GFP_SKIP_KASAN_POISON,"__GFP_SKIP_KASAN_POISON"},\
+	{(unsigned long)__GFP_EXT,		"__GFP_EXT"}		\
 
 #define show_gfp_flags(flags)						\
 	(flags) ? __print_flags(flags, "|",				\
diff --git a/init/main.c b/init/main.c
index 649d9e4201a8..09e0082138c8 100644
--- a/init/main.c
+++ b/init/main.c
@@ -101,6 +101,8 @@
 #include <linux/init_syscalls.h>
 #include <linux/stackdepot.h>
 #include <linux/randomize_kstack.h>
+#include <linux/emem.h>
+#include <linux/swiotlb.h>
 #include <net/net_namespace.h>
 
 #include <asm/io.h>
@@ -1030,6 +1032,12 @@ asmlinkage __visible void __init __no_sanitize_address start_kernel(void)
 	if (initcall_debug)
 		initcall_debug_enable();
 
+	/*
+	 * Needs to happen before the irq init as we may need to share
+	 * some memory for the irq controller itself.
+	 */
+	emem_region_init();
+
 	context_tracking_init();
 	/* init some links before init_ISA_irqs() */
 	early_irq_init();
diff --git a/mm/Kconfig b/mm/Kconfig
index c048dea7e342..80de7ff5a89f 100644
--- a/mm/Kconfig
+++ b/mm/Kconfig
@@ -778,6 +778,10 @@ config ZONE_DMA32
 	depends on !X86_32
 	default y if ARM64
 
+config ZONE_EXT
+	bool "Support external allocation pool"
+	depends on MEMORY_HOTPLUG
+
 config ZONE_DEVICE
 	bool "Device memory (pmem, HMM, etc...) hotplug support"
 	depends on MEMORY_HOTPLUG
@@ -798,6 +802,17 @@ config ZONE_DEVICE
 config DEV_PAGEMAP_OPS
 	bool
 
+config EXT_MEMORY
+	bool "Support for allocations from a external memory pool"
+	select ZONE_EXT
+
+	help
+	  Support for kernel memory allocations outside of the regular
+	  kernel regions. These regions are configured separately via
+	  the device tree.
+
+	  If unsure, say N.
+
 #
 # Helpers to mirror range of the CPU page tables of a process into device page
 # tables.
diff --git a/mm/Makefile b/mm/Makefile
index fc60a40ce954..c9b7bc97f837 100644
--- a/mm/Makefile
+++ b/mm/Makefile
@@ -130,3 +130,4 @@ obj-$(CONFIG_PAGE_REPORTING) += page_reporting.o
 obj-$(CONFIG_IO_MAPPING) += io-mapping.o
 obj-$(CONFIG_HAVE_BOOTMEM_INFO_NODE) += bootmem_info.o
 obj-$(CONFIG_GENERIC_IOREMAP) += ioremap.o
+obj-$(CONFIG_EXT_MEMORY) += emem.o
diff --git a/mm/emem.c b/mm/emem.c
new file mode 100644
index 000000000000..8c4dd150bb20
--- /dev/null
+++ b/mm/emem.c
@@ -0,0 +1,426 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ *  linux/mm/emem.c
+ */
+
+#include <linux/slab.h>
+#include <linux/memory_hotplug.h>
+#include <linux/of_address.h>
+#include <linux/of.h>
+#include <linux/emem.h>
+#include <linux/memblock.h>
+
+#define EMEM_NAME "emem"
+
+const bool emem_host = true;
+extern gfp_t gfp_allowed_mask;
+struct emem_region emem;
+DEFINE_SPINLOCK(emem_lock);
+static bool emem_init_done;
+
+static int emem_major;
+static atomic_t emem_dopen = ATOMIC_INIT(0);
+
+int emem_open(struct inode *inode, struct file *file)
+{
+	return atomic_add_unless(&emem_dopen, 1, 1) ? 0 : -EBUSY;
+}
+
+int emem_mmap(struct file *filp, struct vm_area_struct *vma)
+{
+	int res;
+
+	vma->vm_flags |= VM_READ | VM_WRITE;
+	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
+
+	res = vm_iomap_memory(vma, emem.dma_base,
+			      emem.npages * PAGE_SIZE);
+	if (res) {
+		pr_err("emem: io_remap_memory(0x%llx,%lu) returned %d\n",
+			emem.dma_base, emem.npages * PAGE_SIZE, res);
+	}
+	return res;
+}
+
+int emem_release(struct inode *inode, struct file *file)
+{
+	iounmap((void *)emem.dma_base);
+	atomic_set(&emem_dopen, 0);
+	return 0;
+}
+
+long emem_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
+{
+	return -ENOTSUPP;
+}
+
+static const struct file_operations fops = {
+	.mmap = emem_mmap,
+	.open = emem_open,
+	.release = emem_release,
+	.mmap = emem_mmap,
+	.unlocked_ioctl = emem_ioctl,
+};
+
+static int emem_device_init(void)
+{
+	if (emem_major)
+		return 0;
+
+	emem_major = register_chrdev(0, EMEM_NAME, &fops);
+	if (emem_major < 0) {
+		pr_err("emem: register_chrdev failed with %d\n",
+			emem_major);
+		return emem_major;
+	}
+
+	pr_info("emem: mknod /dev/%s c %d 0\n", EMEM_NAME, emem_major);
+	return 0;
+}
+late_initcall(emem_device_init);
+
+static void print_region(u64 start_addr, u64 end_addr)
+{
+	pr_info("emem: region 0x%llx - 0x%llx, pages 0x%llx - 0x%llx\n",
+		start_addr, end_addr,
+		(u64)virt_to_page(start_addr),
+		(u64)virt_to_page(end_addr));
+}
+
+static int emem_get_config(struct device_node *np, phys_addr_t *base, size_t *size)
+{
+	struct device_node *shm_np;
+	struct resource res_mem;
+	int ret;
+
+	shm_np = of_parse_phandle(np, "memory-region", 0);
+	if (!shm_np)
+		return -EINVAL;
+
+	ret = of_address_to_resource(shm_np, 0, &res_mem);
+	if (ret)
+		return -EINVAL;
+
+	*base = res_mem.start;
+	*size = resource_size(&res_mem);
+	of_node_put(shm_np);
+
+	if (!*base || !*size)
+		return -EINVAL;
+
+	pr_info("emem: shm base at 0x%llx size %lu\n", *base, *size);
+	return 0;
+}
+
+__attribute__((optimize(0)))
+int emem_region_init(void)
+{
+	struct device_node *np;
+	phys_addr_t base;
+	unsigned long iflags;
+	size_t size, iosize;
+	int res, ret = 0;
+	void *io;
+
+	if (emem_init_done)
+		return 0;
+	emem_init_done = true;
+
+	spin_lock_irqsave(&emem_lock, iflags);
+	np = of_find_node_by_path("/emem_region");
+	if (!np) {
+		pr_err("emem: region not configured\n");
+		res = -ENOTSUPP;
+		goto out;
+	}
+
+	res = emem_get_config(np, &base, &size);
+	of_node_put(np);
+	if (res)
+		goto out;
+
+	if ((base % PAGE_SIZE) || (size % PAGE_SIZE) || !size) {
+		res = -EINVAL;
+		goto out;
+	}
+
+	/* Add the block and make sure it's not part of existing zones */
+	if (!emem_host)
+		iosize = size / EMEM_IOSPLIT;
+	else
+		iosize = 0;
+
+retry:
+	res = add_memory(0, base, size - iosize, MMOP_OFFLINE);
+	if ((res == -EEXIST) && !ret) {
+		pr_warn("emem: memory block already exists, trying to offline it\n");
+		ret = 1;
+		res = remove_memory(base, size - iosize);
+		if (res == 0)
+			goto retry;
+		else
+			goto out;
+	} else if (res != 0)
+		goto out;
+
+	emem.dma_base = base;
+	emem.npages = (size - iosize) / PAGE_SIZE;
+
+	/* Host does not allocate, just accesses */
+	if (emem_host)
+		goto out;
+
+	/* Kernel memory setup */
+	emem.bitmap = kzalloc(GFP_KERNEL | GFP_ATOMIC, emem.npages * 8);
+	if (!emem.bitmap) {
+		res = -ENOMEM;
+		goto out;
+	}
+	emem.bits = emem.npages * PAGE_SIZE * 8;
+	emem.base = (u64)phys_to_virt(emem.dma_base);
+
+	/* IO memory setup */
+	emem.io_dma_base = emem.dma_base + (emem.npages * PAGE_SIZE);
+	io = ioremap(emem.io_dma_base, iosize);
+	if (!io)
+		panic("unable to ioremap io block\n");
+	emem.iobase = (u64)io;
+	emem.iopages = iosize / PAGE_SIZE;
+	emem.iobits = iosize * 8;
+	emem.iobitmap = kzalloc(GFP_KERNEL | GFP_ATOMIC, (emem.iobits / 8));
+	if (!emem.iobitmap) {
+		res = -ENOMEM;
+		goto out;
+	}
+
+	/* Now allow allocations into this region */
+	gfp_allowed_mask |= GFP_EXT;
+
+out:
+	if (res == 0) {
+		if (emem_host)
+			pr_info("emem: host enabled for 0x%llx - 0x%llx\n",
+				(u64)base, (u64)(base + size));
+		else
+			pr_info("emem: guest region at 0x%llx - 0x%llx\n",
+				(u64)base, (u64)(base + size));
+	} else
+		pr_err("emem: region registration failed, error %d\n", res);
+
+	spin_unlock_irqrestore(&emem_lock, iflags);
+	return res;
+}
+
+int is_emem(void *vaddr)
+{
+	u64 s, e, v = (u64)vaddr;
+
+	s = emem.base;
+	e = s + (emem.npages * PAGE_SIZE);
+	if ((v >= s) && (v < e))
+		return 1;
+	return 0;
+}
+EXPORT_SYMBOL(is_emem);
+
+int is_emem_dma(dma_addr_t addr)
+{
+	u64 s, e, a = (u64)addr;
+
+	s = (u64)emem.dma_base;
+	e = s + (emem.npages * PAGE_SIZE);
+	if ((a >= s) && (a < e))
+		return 1;
+	return 0;
+}
+EXPORT_SYMBOL(is_emem_dma);
+
+int is_emem_io(void *vaddr)
+{
+	u64 s, e, v = (u64)vaddr;
+
+	s = emem.iobase;
+	e = s + (emem.iopages * PAGE_SIZE);
+	if ((v >= s) && (v < e))
+		return 1;
+	return 0;
+}
+EXPORT_SYMBOL(is_emem_io);
+
+int is_emem_io_phys(phys_addr_t addr)
+{
+	u64 s, e, v = (u64)addr;
+
+	s = emem.io_dma_base;
+	e = s + (emem.iopages * PAGE_SIZE);
+	if ((v >= s) && (v < e))
+		return 1;
+	return 0;
+}
+EXPORT_SYMBOL(is_emem_io_phys);
+
+struct page *emem_getpages_unlocked(gfp_t flags, int order)
+{
+	struct page *page, *npage;
+	void *vaddr = NULL, *eaddr;
+	u64 start_addr, end_addr;
+	int pageno;
+
+	pageno = bitmap_find_free_region(emem.bitmap, emem.bits, order);
+	if (pageno >= 0)
+		vaddr = (void *)emem.base + (pageno << PAGE_SHIFT);
+	if (!vaddr)
+		return NULL;
+
+	eaddr = vaddr + ((1 << order) * PAGE_SIZE);
+	page = virt_to_page(vaddr);
+	start_addr = 0;
+	end_addr = 0;
+
+	while (vaddr < eaddr) {
+		npage = virt_to_page(vaddr);
+		if (!npage)
+			panic("emem: no page for 0x%llx?\n", (u64)vaddr);
+
+		get_page(npage);
+		SetPageReserved(npage);
+
+		/* This is only for debugging */
+		if (page_ref_count(npage) > 1) {
+			if (!start_addr)
+				start_addr = (u64)vaddr;
+			end_addr = (u64)vaddr;
+		} else {
+			if (start_addr)
+				print_region(start_addr, end_addr);
+			start_addr = 0;
+			end_addr = 0;
+		}
+		if (flags & __GFP_ZERO)
+			memset(vaddr, 0, PAGE_SIZE);
+
+		vaddr += PAGE_SIZE;
+	}
+	pr_info("emem: allocated kmem 0x%llx - 0x%llx\n",
+		(u64)page_to_virt(page), (u64)eaddr - 1);
+
+	return page;
+}
+EXPORT_SYMBOL_GPL(emem_getpages_unlocked);
+
+struct page *emem_getpages(gfp_t flags, int order)
+{
+	struct page *page;
+	unsigned long iflags;
+
+	if (order > EMEM_ALLOC_MAXORDER)
+		return NULL;
+
+	if (!emem.bitmap)
+		return ERR_PTR(-ENOTSUPP);
+
+	spin_lock_irqsave(&emem_lock, iflags);
+	page = emem_getpages_unlocked(flags, order);
+	spin_unlock_irqrestore(&emem_lock, iflags);
+
+	return page;
+}
+EXPORT_SYMBOL_GPL(emem_getpages);
+
+void emem_freepages(struct page *page, int order)
+{
+	unsigned long irq_flags;
+	void *vaddr, *eaddr;
+	int pageno;
+
+	if (!emem.bitmap || !page)
+		return;
+
+	if (order > EMEM_ALLOC_MAXORDER) {
+		pr_crit("emem: free of insane order %d\n", order);
+		return;
+	}
+
+	vaddr = page_to_virt(page);
+	if (!is_emem(vaddr)) {
+		pr_crit("emem: attempting to free non-emem page at 0x%llx\n",
+			(u64)vaddr);
+		return;
+	}
+	pageno = (vaddr - (void *)emem.base) >> PAGE_SHIFT;
+
+	spin_lock_irqsave(&emem_lock, irq_flags);
+	eaddr = vaddr + ((1 << order) * PAGE_SIZE);
+	while (vaddr < eaddr) {
+		page = virt_to_page(vaddr);
+		if (!page)
+			panic("emem: no page\n");
+
+		page_mapcount_reset(page);
+		ClearPageReserved(page);
+
+		if (page_ref_count(page) > 1)
+			panic("emem: page 0x%llx still in use?\n", (u64)vaddr);
+
+		put_page(page);
+		vaddr += PAGE_SIZE;
+	}
+	/* Release it all */
+	bitmap_release_region(emem.bitmap, pageno, order);
+	spin_unlock_irqrestore(&emem_lock, irq_flags);
+
+	pr_info("emem: freed kmem 0x%llx - 0x%llx\n",
+		(u64)page_to_virt(page),(u64)eaddr - 1);
+}
+EXPORT_SYMBOL_GPL(emem_freepages);
+
+void *emem_getpages_io(gfp_t flags, int order)
+{
+	unsigned long irq_flags;
+	void *vaddr = NULL;
+	int pageno;
+
+	if (order > EMEM_ALLOC_MAXORDER)
+		return NULL;
+
+	if (!emem.iobitmap)
+		return ERR_PTR(-ENOTSUPP);
+
+	if (!(flags & GFP_DMA))
+		return ERR_PTR(-ENOTSUPP);
+
+	spin_lock_irqsave(&emem_lock, irq_flags);
+	pageno = bitmap_find_free_region(emem.iobitmap, emem.iobits, order);
+	if (pageno >= 0)
+		vaddr = (void *)emem.iobase + (pageno << PAGE_SHIFT);
+	spin_unlock_irqrestore(&emem_lock, irq_flags);
+
+	if ((pageno >= 0) && (flags & __GFP_ZERO))
+		memset(vaddr, 0, (1 << order) * PAGE_SIZE);
+
+	pr_info("emem: allocated iomem 0x%llx - 0x%llx for IO\n", (u64)vaddr,
+		(u64)(vaddr + ((1 << order) * PAGE_SIZE) -1));
+
+	return vaddr;
+}
+EXPORT_SYMBOL_GPL(emem_getpages_io);
+
+void emem_freepages_io(void *vaddr, int order)
+{
+	unsigned long irq_flags;
+	int pageno;
+
+	if (order > EMEM_ALLOC_MAXORDER) {
+			pr_crit("emem: free of insane order %d\n", order);
+			return;
+	}
+	pageno = (vaddr - (void *)emem.iobase) >> PAGE_SHIFT;
+
+	spin_lock_irqsave(&emem_lock, irq_flags);
+	bitmap_release_region(emem.iobitmap, pageno, order);
+	spin_unlock_irqrestore(&emem_lock, irq_flags);
+
+	pr_info("emem: freed iomem 0x%llx - 0x%llx\n", (u64)vaddr,
+		(u64)(vaddr + ((1 << order) * PAGE_SIZE) -1));
+}
+EXPORT_SYMBOL_GPL(emem_freepages_io);
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index a71722b4e464..da387024b7f6 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -72,6 +72,7 @@
 #include <linux/padata.h>
 #include <linux/khugepaged.h>
 #include <linux/buffer_head.h>
+#include <linux/emem.h>
 #include <asm/sections.h>
 #include <asm/tlbflush.h>
 #include <asm/div64.h>
@@ -5398,6 +5399,14 @@ struct page *__alloc_pages(gfp_t gfp, unsigned int order, int preferred_nid,
 	}
 
 	gfp &= gfp_allowed_mask;
+
+	if (unlikely(gfp & __GFP_EXT)) {
+		page = emem_getpages(gfp, order);
+		if (!page)
+			return NULL;
+		goto out;
+	}
+
 	/*
 	 * Apply scoped allocation constraints. This is mainly about GFP_NOFS
 	 * resp. GFP_NOIO which has to be inherited for all allocation requests
@@ -5490,6 +5499,10 @@ EXPORT_SYMBOL(get_zeroed_page);
  */
 void __free_pages(struct page *page, unsigned int order)
 {
+	if (unlikely(is_emem(page_to_virt(page)))) {
+		emem_freepages(page, order);
+		return;
+	}
 	if (put_page_testzero(page))
 		free_the_page(page, order);
 	else if (!PageHead(page))
diff --git a/mm/slab_common.c b/mm/slab_common.c
index 022319e7deaf..e85e57c7bf2c 100644
--- a/mm/slab_common.c
+++ b/mm/slab_common.c
@@ -774,6 +774,7 @@ struct kmem_cache *kmalloc_slab(size_t size, gfp_t flags)
 {								\
 	.name[KMALLOC_NORMAL]  = "kmalloc-" #__short_size,	\
 	.name[KMALLOC_RECLAIM] = "kmalloc-rcl-" #__short_size,	\
+	.name[KMALLOC_EXT]     = "kmalloc-ext-" #__short_size,  \
 	KMALLOC_CGROUP_NAME(__short_size)			\
 	KMALLOC_DMA_NAME(__short_size)				\
 	.size = __size,						\
@@ -872,6 +873,8 @@ new_kmalloc_cache(int idx, enum kmalloc_cache_type type, slab_flags_t flags)
 		}
 		flags |= SLAB_ACCOUNT;
 	}
+	if (type == KMALLOC_EXT)
+		flags |= SLAB_CACHE_EXT;
 
 	kmalloc_caches[type][idx] = create_kmalloc_cache(
 					kmalloc_info[idx].name[type],
diff --git a/mm/slub.c b/mm/slub.c
index f95ae136a069..c2ea46f920c6 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -4152,6 +4152,9 @@ static int calculate_sizes(struct kmem_cache *s, int forced_order)
 	if (s->flags & SLAB_CACHE_DMA32)
 		s->allocflags |= GFP_DMA32;
 
+	if (s->flags & SLAB_CACHE_EXT)
+		s->allocflags |= GFP_EXT;
+
 	if (s->flags & SLAB_RECLAIM_ACCOUNT)
 		s->allocflags |= __GFP_RECLAIMABLE;
 
@@ -5891,6 +5894,8 @@ static char *create_unique_id(struct kmem_cache *s)
 		*p++ = 'd';
 	if (s->flags & SLAB_CACHE_DMA32)
 		*p++ = 'D';
+	if (s->flags & SLAB_CACHE_EXT)
+		*p++ = 'E';
 	if (s->flags & SLAB_RECLAIM_ACCOUNT)
 		*p++ = 'a';
 	if (s->flags & SLAB_CONSISTENCY_CHECKS)
diff --git a/tools/perf/builtin-kmem.c b/tools/perf/builtin-kmem.c
index da03a341c63c..08f9ff68e25b 100644
--- a/tools/perf/builtin-kmem.c
+++ b/tools/perf/builtin-kmem.c
@@ -660,6 +660,7 @@ static const struct {
 	{ "__GFP_RECLAIM",		"R" },
 	{ "__GFP_DIRECT_RECLAIM",	"DR" },
 	{ "__GFP_KSWAPD_RECLAIM",	"KR" },
+	{ "__GFP_EXT",			"EXT" },
 };
 
 static size_t max_gfp_len;
diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index 3ffed093d3ea..b0324989f0db 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -2485,6 +2485,9 @@ kvm_pfn_t __gfn_to_pfn_memslot(struct kvm_memory_slot *slot, gfn_t gfn,
 {
 	unsigned long addr = __gfn_to_hva_many(slot, gfn, NULL, write_fault);
 
+	if (slot->base_gfn == 0x100000)
+		panic("faulting at emem region\n");
+
 	if (hva)
 		*hva = addr;
 
-- 
2.34.1

