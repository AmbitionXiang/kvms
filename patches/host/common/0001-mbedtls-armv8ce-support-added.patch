From 3f843b15c0b8958ed290327f436c113bd783640f Mon Sep 17 00:00:00 2001
From: Martti Takala <martti.takala@digital14.com>
Date: Tue, 29 Mar 2022 11:53:04 +0300
Subject: [PATCH] mbedtls: armv8ce support added

The base of this commit is mbedtls branch: archive/armv8_crypto_extension
---
 include/mbedtls/armv8ce_aes.h |  63 ++++++++++++++
 library/Makefile              |   4 +-
 library/aes.c                 |   9 ++
 library/armv8ce_aes.c         | 154 ++++++++++++++++++++++++++++++++++
 4 files changed, 228 insertions(+), 2 deletions(-)
 create mode 100644 include/mbedtls/armv8ce_aes.h
 create mode 100644 library/armv8ce_aes.c

diff --git a/include/mbedtls/armv8ce_aes.h b/include/mbedtls/armv8ce_aes.h
new file mode 100644
index 000000000..8de166e43
--- /dev/null
+++ b/include/mbedtls/armv8ce_aes.h
@@ -0,0 +1,63 @@
+/**
+ * \file armv8ce_aes.h
+ *
+ * \brief ARMv8 Cryptography Extensions -- Optimized code for AES and GCM
+ */
+
+/*
+ *
+ *  Copyright (C) 2006-2017, ARM Limited, All Rights Reserved
+ *  SPDX-License-Identifier: Apache-2.0
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License"); you may
+ *  not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ *  This file is part of mbed TLS (https://tls.mbed.org)
+ */
+
+#ifndef MBEDTLS_ARMV8CE_AES_H
+#define MBEDTLS_ARMV8CE_AES_H
+
+#include "aes.h"
+
+/**
+ * \brief          [ARMv8 Crypto Extensions] AES-ECB block en(de)cryption
+ *
+ * \param ctx      AES context
+ * \param mode     MBEDTLS_AES_ENCRYPT or MBEDTLS_AES_DECRYPT
+ * \param input    16-byte input block
+ * \param output   16-byte output block
+ *
+ * \return         0 on success (cannot fail)
+ */
+
+int mbedtls_armv8ce_aes_crypt_ecb( mbedtls_aes_context *ctx,
+                                   int mode,
+                                   const unsigned char input[16],
+                                   unsigned char output[16] );
+
+/**
+ * \brief          [ARMv8 Crypto Extensions]  Multiply in GF(2^128) for GCM
+ *
+ * \param c        Result
+ * \param a        First operand
+ * \param b        Second operand
+ *
+ * \note           Both operands and result are bit strings interpreted as
+ *                 elements of GF(2^128) as per the GCM spec.
+ */
+
+void mbedtls_armv8ce_gcm_mult( unsigned char c[16],
+                               const unsigned char a[16],
+                               const unsigned char b[16] );
+
+#endif /* MBEDTLS_ARMV8CE_AES_H */
diff --git a/library/Makefile b/library/Makefile
index 7e16bd895..3c3f6e2e7 100644
--- a/library/Makefile
+++ b/library/Makefile
@@ -10,7 +10,7 @@ LDFLAGS ?=
 DIR_FOR_MBED_TLS_ENV=../library
 ifneq "$(wildcard $(DIR_FOR_MBED_TLS_ENV) )" ""
 	# Set include dirs for Mbed TLS test environment
-	INCLUDE_DIRS=-I../include
+	INCLUDE_DIRS=-I../include -I../../buildtools/usr/include/
 else
 	# Set include dirs for Mbed OS test environment
 	INCLUDE_DIRS=-I../inc
@@ -99,7 +99,7 @@ OBJS_CRYPTO=	aes.o		aesni.o		arc4.o		\
 		ripemd160.o	rsa_internal.o	rsa.o  		\
 		sha1.o		sha256.o	sha512.o	\
 		threading.o	timing.o	version.o	\
-		version_features.o		xtea.o
+		version_features.o		xtea.o	armv8ce_aes.o \
 
 
 OBJS_X509=	certs.o		pkcs11.o	x509.o
diff --git a/library/aes.c b/library/aes.c
index 72cfc104d..7d90d93bb 100644
--- a/library/aes.c
+++ b/library/aes.c
@@ -45,6 +45,10 @@
 #include "mbedtls/aesni.h"
 #endif
 
+#if defined(MBEDTLS_ARMV8CE_AES_C)
+#include "mbedtls/armv8ce_aes.h"
+#endif
+
 #if defined(MBEDTLS_SELF_TEST)
 #if defined(MBEDTLS_PLATFORM_C)
 #include "mbedtls/platform.h"
@@ -2059,6 +2063,11 @@ int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
         return( mbedtls_aesni_crypt_ecb( ctx, mode, input, output ) );
 #endif
 
+#if defined(MBEDTLS_ARMV8CE_AES_C)
+    if (mbedtls_armv8_has_aes_support())
+        return mbedtls_armv8ce_aes_crypt_ecb( ctx, mode, input, output );
+#endif
+
 #if defined(MBEDTLS_PADLOCK_C) && defined(MBEDTLS_HAVE_X86)
     if( aes_padlock_ace )
     {
diff --git a/library/armv8ce_aes.c b/library/armv8ce_aes.c
new file mode 100644
index 000000000..9b41ad1e6
--- /dev/null
+++ b/library/armv8ce_aes.c
@@ -0,0 +1,154 @@
+/*
+ *  ARMv8 Cryptography Extensions -- Optimized code for AES and GCM
+ *
+ *  Copyright (C) 2006-2017, ARM Limited, All Rights Reserved
+ *  SPDX-License-Identifier: Apache-2.0
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License"); you may
+ *  not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ *  This file is part of mbed TLS (https://tls.mbed.org)
+ */
+
+#if !defined(MBEDTLS_CONFIG_FILE)
+#include "mbedtls/config.h"
+#else
+#include MBEDTLS_CONFIG_FILE
+#endif
+
+#if defined(MBEDTLS_ARMV8CE_AES_C)
+#include <arm_neon.h>
+#include "mbedtls/armv8ce_aes.h"
+
+#if defined(MBEDTLS_ARMV8CE_DEBUG)
+extern void mbedtls_armv8ce_in_use (void) __attribute__((weak));
+#endif
+
+#ifndef asm
+#define asm __asm
+#endif
+
+int mbedtls_armv8_has_aes_support(void)
+{
+	register uint64_t x0 __asm__ ("x0");
+	__asm__ __volatile__ ("mrs x0, s3_0_c0_c6_0;" : : : "%x0");
+	return x0 & 0xf0;
+}
+
+/*
+ *  [Armv8 Cryptography Extensions]  AES-ECB block en(de)cryption
+ */
+
+#if defined(MBEDTLS_AES_C)
+int mbedtls_armv8ce_aes_crypt_ecb( mbedtls_aes_context *ctx,
+                                   int mode,
+                                   const unsigned char input[16],
+                                   unsigned char output[16] )
+{
+    unsigned int i;
+    const uint8_t *rk;
+    uint8x16_t x, k;
+#if defined(MBEDTLS_ARMV8CE_DEBUG)
+    if (mbedtls_armv8ce_in_use)
+	    mbedtls_armv8ce_in_use();
+#endif
+    x = vld1q_u8( input );                          /* input block */
+    rk = (const uint8_t *) ctx->rk;                 /* round keys  */
+
+    if( mode == MBEDTLS_AES_ENCRYPT )
+    {
+        for( i = ctx->nr - 1; i != 0; i-- )         /* encryption loop */
+        {
+            k = vld1q_u8( rk );
+            rk += 16;
+            x = vaeseq_u8( x, k );
+            x = vaesmcq_u8( x );
+        }
+        k = vld1q_u8( rk );
+        rk += 16;
+        x = vaeseq_u8( x, k );
+    }
+    else
+    {
+        for( i = ctx->nr - 1; i != 0 ; i-- )         /* decryption loop */
+        {
+            k = vld1q_u8( rk );
+            rk += 16;
+            x = vaesdq_u8( x, k );
+            x = vaesimcq_u8( x );
+        }
+        k = vld1q_u8( rk );
+        rk += 16;
+        x = vaesdq_u8( x, k );
+    }
+
+    k = vld1q_u8( rk );                             /* final key just XORed */
+    x = veorq_u8( x, k );
+    vst1q_u8( output, x );                          /* write out */
+
+    return ( 0 );
+}
+
+#endif /* MBEDTLS_AES_C */
+
+
+/*
+ *  [Armv8 Cryptography Extensions]  Multiply in GF(2^128) for GCM
+ */
+
+#if defined(MBEDTLS_GCM_C)
+
+void mbedtls_armv8ce_gcm_mult( unsigned char c[16],
+                               const unsigned char a[16],
+                               const unsigned char b[16] )
+{
+    /* GCM's GF(2^128) polynomial basis is x^128 + x^7 + x^2 + x + 1 */
+    const uint64x2_t base = { 0, 0x86 };            /* note missing LS bit */
+
+    register uint8x16_t vc asm( "v0" );             /* named registers */
+    register uint8x16_t va asm( "v1" );             /* (to avoid conflict) */
+    register uint8x16_t vb asm( "v2" );
+    register uint64x2_t vp asm( "v3" );
+
+    va = vld1q_u8( a );                             /* load inputs */
+    vb = vld1q_u8( b );
+    vp = base;
+
+    asm (
+        "rbit    %1.16b, %1.16b             \n\t"   /* reverse bit order */
+        "rbit    %2.16b, %2.16b             \n\t"
+        "pmull2  %0.1q,  %1.2d,  %2.2d      \n\t"   /* v0 = a.hi * b.hi */
+        "pmull2  v4.1q,  %0.2d,  %3.2d      \n\t"   /* mul v0 by x^64, reduce */
+        "ext     %0.16b, %0.16b, %0.16b, #8 \n\t"
+        "eor     %0.16b, %0.16b, v4.16b     \n\t"
+        "ext     v5.16b, %2.16b, %2.16b, #8 \n\t"   /* (swap hi and lo in b) */
+        "pmull   v4.1q,  %1.1d,  v5.1d      \n\t"   /* v0 ^= a.lo * b.hi */
+        "eor     %0.16b, %0.16b, v4.16b     \n\t"
+        "pmull2  v4.1q,  %1.2d,  v5.2d      \n\t"   /* v0 ^= a.hi * b.lo */
+        "eor     %0.16b, %0.16b, v4.16b     \n\t"
+        "pmull2  v4.1q,  %0.2d,  %3.2d      \n\t"   /* mul v0 by x^64, reduce */
+        "ext     %0.16b, %0.16b, %0.16b, #8 \n\t"
+        "eor     %0.16b, %0.16b, v4.16b     \n\t"
+        "pmull   v4.1q,  %1.1d,  %2.1d      \n\t"   /* v0 ^= a.lo * b.lo */
+        "eor     %0.16b, %0.16b, v4.16b     \n\t"
+        "rbit    %0.16b, %0.16b             \n\t"   /* reverse bits for output */
+        : "=w" (vc)                                 /* q0:      output */
+        : "w" (va), "w" (vb), "w" (vp)              /* q1, q2:  input */
+        : "v4", "v5"                                /* q4, q5:  clobbered */
+    );
+
+    vst1q_u8( c, vc );                              /* write out */
+}
+
+#endif /* MBEDTLS_GCM_C */
+
+#endif /* MBEDTLS_ARMV8CE_AES_C */
-- 
2.25.1

